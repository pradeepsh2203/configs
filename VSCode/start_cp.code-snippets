{
	// Place your cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"CPP Template": {
		"prefix": "start_cpp",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"typedef long long ll;",
			"#define vi vector<int>",
			"#define pb push_back",
			"#define pii pair<int,int>",
			"",
			"${1:bool prime(ll a) {",
			"    for (int i = 2; i < (ll)sqrt(a) + 1; i++) {",
			"        if (a % i == 0) return false;",
			"    \\}",
			"    return true;",
			"\\}",
			"ll gcd(ll bigger, ll smaller) {",
			"    if (bigger == 0 || smaller == 0) return 0;",
			"    if (bigger % smaller == 0) return smaller;",
			"    return gcd(smaller, bigger % smaller);",
			"\\}",
			"}",
			"int main() {",
			"    ios_base::sync_with_stdio(false);",
			"    cin.tie(NULL);",
			"    ${0:/*---code---*/}",
			"}"
		],
		"description": "CPP Template"
	},
	"Test Cases": {
		"prefix": "test_cases",
		"body": ["${1:int} t;", "cin>>t;", "while(t--){", "    ${0}", "}"],
		"description": "Test Cases"
	},
	"Graph Template": {
		"prefix": "Graph",
		"body": [
			"",
			"template<typename T>",
			"class Graph {",
			"public:",
			"    map<T, list<T>> graph;",
			"    ${1:void addEdge(T x, T y) {",
			"        graph[x].push_back(y);",
			"        graph[y].push_back(x);",
			"    \\}}",
			"    ${2:void addEdge(T x, T y) {",
			"        graph[x].push_back(y);",
			"    \\}}",
			"    ${0:your code comes here}",
			"};",
			""
		],
		"description": "Graph Template"
	},
	"For Loop": {
		"prefix": "for",
		"body": [
			"for (${1:int} ${2:i} = ${3:0}; ${2:i} < ${4}; ${2:i}++){",
			"    ${0}",
			"}"
		],
		"description": "For Loop"
	},
	"DSU": {
		"prefix": "dsu",
		"body": [
			"class DSU {",
			"public:",
			"    vector<int> parent;",
			"    vector<int> rank;",
			"    DSU(int n) {",
			"        parent = vector<int>(n + 1, -1);",
			"        rank = vector<int>(n + 1, 1);",
			"    }",
			"    int find(int ind) {",
			"        if (parent[ind] == -1) {",
			"            return ind;",
			"        }",
			"        return parent[ind] = find(parent[ind]);",
			"    }",
			"",
			"    void unionS(int ind1, int ind2) {",
			"        int s1 = find(ind1);",
			"        int s2 = find(ind2);",
			"",
			"        if (s1 != s2) {",
			"            if (rank[s1] <= rank[s2]) {",
			"                parent[s1] = s2;",
			"                rank[s2] += rank[s1];",
			"            }",
			"            else {",
			"                parent[s2] = s1;",
			"                rank[s1] += s2;",
			"            }",
			"        }",
			"    }",
			"",
			"};"
		],
		"description": "DSU"
	},
	"GCD": {
		"prefix": "gcd",
		"body": [
			"int gcd(int bigger, int smaller) {",
			"    if (bigger == 0 || smaller == 0) return 0;",
			"    if (bigger % smaller == 0) return smaller;",
			"    return gcd(smaller, bigger % smaller);",
			"}"
		],
		"description": "GCD"
	}
}
